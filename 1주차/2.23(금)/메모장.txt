6장. 배열
- 배열 개요

cf). DB 연산
전체 scan
rage scan
equality selection
insultion
deletion

레드블랙트리에서 아래 왼쪽으로 BiSection Search 가능 / rage, equality 에선 성능이 좋으나 전체 scan 에선 그렇지 않다.
heap 과 해쉬 테이블 + 스택

리스트는 어떤 동작을 해야하나 add, remove, at. 상태는 별로 관심없다. ADT(abstract data type)

array list VS linked list 를 언제 써야 하나
삽입삭제 안좋음 VS 대용량에 좋다.

 + ) 스택, 힙, 리스트 자바 파일 만들어놓고 앞으로 클래스로 계속 활용하기
=> test.java

-- 배열이란?
배열은 요소를 순서대로 모아서 관리하기 위해 만들어진 자료구조
가상 메모리 기법 : 32bits 컴퓨터는 4GB 파일을 한번에 읽을 수 없다. 고로 데이터 로딩을 모두 하는게 아니라 프로그램 실행을 하며 디스크에서 데이터를 동시에 로딩한다. (페이징)
페이지에 고정길이 레코드에 똑같은 길이가 있다. 8bits. 이 때는 데이터를 빨리 읽을 수 있다.
만약 레코드가 가변길이라면 offset을 사용해 메모리를 읽으므로 느리고, 메모리 낭비가 발생한다.

)배열은 요소를 순서대로 모아서 관리하기 위해 만들어진 자료구조입니다. 인덱스라고 부르는 정수로 만들어진 위치를 사용하여 배열내 각각의 요소에 액세스 할 수 있습니다.
)배열은 임의 접근(Random Access)를 허용합니다. 이는 프로그램의 배열의 요소에 순서와 관계없이 빠르게 액세스 할 수 있음을 의미합니다.

-- Java 에서 배열 표기법
배열을 선언하며 배열의 크기를 지정할 수는 없습니다.
=> 초기화가 안된 곳을 할당할 수는 없기 때문에. 

-- 배열의 차원
선형 1차원 배열과 표형 2차원 배열, 육면체형 2차원 배열을 선언할 수 있음
자바에서 2차원 배열은 비정방형 배열이 가능하다. (5,3)
2차원 배열을 선언할 때는 두 쌍의 대괄호를 사용합니다. 두 쌍의 대괄호를 사용해 선언된 배열은 두 개의 정수 인덱스가 배열의 각 요소와 연관되기 때문에 Rank 2 배열이라고도 합니다.

cf). 구글 검색으로 ijava 설치 후 주피터에서 java 실행

-- 배열 요소에 접근
-- 배열의 경계 검사
배열 내 잘못된 위치에 대한 접근은 ArrayIndexOutofBoundsException 예외를 발생

-- 배열과 컬렉션 비교
리스트 (컬렉션) : 다양한 타입의 요소를 저장하기 위해 설계됨 + 유연함

- 배열생성
-- 배열 인스턴스 생성
        int[] array = new int[3];
        System.out.println(array[0]);
실행시 0 출력됨
	int[] array = {1,2,3};
도 가능
	String 배열에는
null 이 기본값으로 들어감.

-- 배열 요소 초기화
-- 다차원 배열 요소 초기화
-- 가변 길이 배열
-- 계산된 크기를 가진 배열 생성
-- 배열 요소 복사
2차원 배열의 길이는 2. []는 배열안의 배열이고, 배열 내 각 배열의 길이가 3.
 => sample.java


- 배열사용
-- 배열의 크기
-- 배열 메소드
clone – 배열의 복사본을 생성함
-- 메소드에서의 배열 return
-- 배열을 파라미터로 전달
-- 명령줄 인자
-- 데모: 명령줄 인자 사용
main 함수의 args 사용
-- foreach 문에서 배열 사용
배열 인덱스 끝날때를 대비해 예외처리를 해줘야 한다.
전체 다 출력 시 매우 유용. 이를 이용해 값을 수정할 수는 없다.

-- Lab 6_1
일반 for문과 for-each 문으로 1 & 2차원 배열 출력
 => arrayprint.java
실행시 java FileDetails Yesterday.txt


-- 배열로 스택 만들기
=> stack.java 


7장. 객체지향 프로그래밍 기본
- 클래스와 객체
-- 클래스란?
-- 객체란?
-- 추상화란?

- 캡슐화
은행 예제
 => bank.java / banktest.java
변수를 숨기고, 동작만 정의한다. 클라이언트는 동일한 방법만 계속 사용하면 된다.
접근제한자 : default, public, private, protected
-- 데이터와 메소드의 결합
-- 접근 가시성 제어
-- 왜 캡슐화를 해야 하는가?

- 객체 데이터
객체는 identity(이름), 상태(클래스 변수), 행위(메소드)를 가진다.
-- 정적 데이터 사용
객체가 아니다. (클래스에서 호출됨)
만약 이자율 interest를 정부에서 공표한다면 static 사용.

- Java와 객체지향
-- Hello, World revisited
main 메소드가 private 이라면 hello.class 외부에 있는 JVM이 호출을 하지 못하게 되므로 application entry point 가 될 수 없다.
static 이 아니라면 메모리에 올라가지 못한다.

-- 단순한 클래스 정의
-- 새 객체 인스턴스화
시계를 만든다
 => time.java
-- this 키워드
호출 체인 가능. 결국 객체는 1개만 생성된다.
-- 포함된 클래스 생성
-- 포함된 클래스에 접근

-- Lab 7_1
전체 공유 변수 : 계좌 발급 시마다 static 으로 선언한 변수를 ++로 이용하면 계좌 중복이 안되고 생성할 수 있다.

과제 있음

======
다음주 : 7-20 객체지향 시스템 정의