00. 분수끼리 더하는 프로그램 만들기
 +> Plus.java


7장. 객체지향 프로그래밍 기본
- 객체지향 시스템 정의
-- 상속
상속은 "is a kind of" 관계를 지정
마린과 질럿 ( 다형성 ) +> Marine.java
유닛이 하나 추가될 때마다 수정해야 하는 코드가 기하급수적으로 늘어난다.
+> Unit.java
이후 extends Unit

--클래스 계층구조
UML (Unified Modeling Language)
클래스 상속 = 서브타이핑 VS 서브클래싱?
장점 : 코드를 안써도 된다. 오류가능성이 줄어든다.
--단일/다중상속
Java 에서는 다중상속을 허용하지 않는다.
--다형성
Unit marine = new Marine();
메소드는 각 서브 클래스에서 재작성 가능
=> 메소드 오버라이딩
-- 추상 클래스
public abstract class Unit { }
-- 인터페이스
public abstract class Unit implements Attackable { }
java.lang의 객체 생성 -> 메모리에 유닛이 먼저 올라간 후 유닛 초기화 -> 유닛에서 상속받아 질럿 생성
super.attack() 또는 this.attack()
@Override 명시 (어노테이션)
추상 클래스와 다르게 추상 메소드만 가지고 있다.

-- 이른/늦은 바인딩
Unit marine = new Marine();
실행 시에는 런타임에 호출해봐야 알게 됨
유닛 클래스는 생성해서 쓸일이 없다. 단순히 추상화를 목적으로 만들었다. (abstract) -> 무조건 오버라이드 필요


+). 스타크래프트 실습
instanceof



8장. 참조 타입
- 참조 타입
-- 값 타입과 참조 타입 비교
-- 참조 타입 변수의 선언과 해제
new : 메모리에 변수가 들어갈 수 있는 공간을 할당한다.
null 로 해제
가비지 콜렉터는 mark&sweep 알고리즘을 쓴다.

-- 초기화 되지 않은 참조 타입 변수
-- 값 타입의 비교와 참조 타입의 비교
-- 같은 객체에 대한 여러 변수의 참조
-- 메소드 파라미터에 참조 타입 사용

- enum 타입
-- enum 타입 선언
enum Season {
	Spring,
	Summer,
	Fall,
	Winter
}
Season season = Season.Spring;

에서 season 은 enum 의 Spring 을 참조한다. 참조 타입이나 값 타입 처럼 사용한다.
힙 영역에 저장이 된다.
-- enum 값 비교
-- enum 타입 메소드
Whatday.java 실습 (스트링 배열 -> enum 으로 바꾸기)
months monthName = months.values()[monthNum];
-- enum 생성자

- 공통 참조 타입
-- Exception 클래스
-- String 클래스
+> String_test.java  실습
-- String 클래스 메소드, 연산자
-- String 값 비교
-- String 비교 연산자

- 객체 계층 구조
-- Object 타입
모든 클래스 타입 캐스팅 가능
모든 클래스는 직접적 또는 간접적으로 Object 클래스에서 상속됩니다.
-- 공통 메소드
+> Student.java 실습

- Java 패키지
-- java.lang 패키지
-- java.util 패키지
-- java.io 패키지
-- 기타 유용한 패키지

-- Lab 8_1 참조 타입 변수를 선언하고 사용
연습3 재귀로 생성해보기

- 타입 변환
-- Wrapper 클래스
-- Boxing과 Unboxing
-- 슈퍼 클래스/서브 클래스 변환
타입 과 인스턴스?
-- instanceof 연산자
+> BoyFriends.java 실습 (추상화) + BoyFriend.java + Birthday.java
new는 연산자 / BoyFriend 는 생성자

-- Object 타입 변환
-- 인터페이스 타입 변환
-- Lab 8_2: 타입 변환

분수 (유리수 더하기)
RationalOperator.java

=> 객체지향적으로 구현
Rational.java

어떠한 동작이나 계산에 관련된 틀을 만들어, 그 틀끼리 상호작용하는 것이 객체지향이다.

+) 과제.
분수 더하기/빼기
객체를 쓰지 않고 메소드로만 구현해보기
객체만 사용해서 사용해보기
ㅡㅡㅡ메소드 목록ㅡㅡㅡ
(최소공약수 구하기)
override로 분수 toString으로 출력
더하기
곱하기

ㅡㅡㅡ클래스
객체들끼리 더하기, 곱하기 가능하게 끔


내일 과제.
포커게임 구현